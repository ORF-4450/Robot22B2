import edu.wpi.first.gradlerio.deploy.roborio.RoboRIO

plugins {
    // Select Java lauguage plugin.
    id "java"
    
    // The version below should be the desired version of Wpilib. GradleRIO and
    // Wpilib are always released in sync as GradleRIO has embedded info about
    // all of the FIRST software tools that need to be included in a build.
    id "edu.wpi.first.GradleRIO" version "2022.3.1"

    // This is a plugin that allows us to access git information about the version
    // of the code we are compiling and include it in the manifiest of the Jar
    // created by the gradle build. From the Jar manifiest, the code can extract
    // that information and include it in the robot trace files.
    id "org.ajoberstar.grgit" version "3.0.0"
}

// Used to run a WPILib development version if directed by the WPI team.
// wpi.maven.useLocal = false
// wpi.maven.useDevelopment = true
// wpi.versions.wpilibVersion = '2022.1.1-19-g8f387f7'
// wpi.versions.wpimathVersion = '2022.1.1-19-g8f387f7'

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

// This is the class loaded and called to start robot program execution on the RoboRIO.
// The Main.java class is defined by FIRST and is the standard interface to our code.
// Inside Main.java is the reference to our top level class, "Robot".
def ROBOT_MAIN_CLASS = "Team4450.Robot22.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamOrDefault(4450)
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = true

// Look in local maven cache first, then maven central for dependent libraries.
repositories {
	mavenLocal()
	mavenCentral()
}

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'junit:junit:4.12'
}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

// Either the name of the current branch, or an empty string if no git repo is found.
def branch = { ->
    if (grgit == null) { // If there's no git repo.
        return ""
    }

    return grgit.branch.current().getName()
}

// Either the short hash of the last commit or an empty string if no git repo is found.
def hash = { ->
    if (grgit == null) { // If there's no git repo.
        return ""
    }
    
    return grgit.head().abbreviatedId
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
           
    manifest {
     	attributes("Branch": branch())
      	attributes("Commit": hash())
       	attributes("Time": new Date().format("yyyy-MM-dd HH:mm:ss"))
     	attributes("User": System.getProperty("user.name"))
    }
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)
